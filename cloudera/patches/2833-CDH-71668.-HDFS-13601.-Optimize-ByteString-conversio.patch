From e3735c6b98e33cabf5e200369a4309a6b08f406e Mon Sep 17 00:00:00 2001
From: Xiao Chen <xiao@cloudera.com>
Date: Mon, 3 Sep 2018 22:17:47 -0700
Subject: [PATCH 2833/2863] CDH-71668. HDFS-13601. Optimize ByteString
 conversions in PBHelper.

(cherry picked from commit 0f0d29a8d10538f3fba180bc6f32332c577527b5)

Conflicts:
	hadoop-hdfs-project/hadoop-hdfs-client/dev-support/findbugsExcludeFile.xml
	hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/DatanodeID.java
	hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocolPB/PBHelperClient.java

==C5_FEATURE_IMPALA_METADATA==

Change-Id: I973e3f5d06f6244a6950bb7fe5a60fce65f972a9
---
 .../apache/hadoop/hdfs/protocol/DatanodeID.java    |   46 +++++++++++++-
 .../apache/hadoop/hdfs/protocolPB/PBHelper.java    |   67 +++++++++++++++++---
 2 files changed, 103 insertions(+), 10 deletions(-)

diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/DatanodeID.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/DatanodeID.java
index 0270282..abeb0dc 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/DatanodeID.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/DatanodeID.java
@@ -18,6 +18,7 @@
 
 package org.apache.hadoop.hdfs.protocol;
 
+import com.google.protobuf.ByteString;
 import org.apache.hadoop.classification.InterfaceAudience;
 import org.apache.hadoop.classification.InterfaceStability;
 
@@ -42,7 +43,9 @@
   public static final DatanodeID[] EMPTY_ARRAY = {};
 
   private String ipAddr;     // IP address
+  private ByteString ipAddrBytes; // ipAddr ByteString to save on PB serde
   private String hostName;   // hostname claimed by datanode
+  private ByteString hostNameBytes; // hostName ByteString to save on PB serde
   private String peerHostName; // hostname from the actual connection
   private int xferPort;      // data streaming port
   private int infoPort;      // info server port
@@ -57,11 +60,16 @@
    * For newly formatted Datanodes it is a UUID.
    */
   private String datanodeUuid = null;
+  // datanodeUuid ByteString to save on PB serde
+  private ByteString datanodeUuidBytes = null;
 
   public DatanodeID(DatanodeID from) {
     this(from.getIpAddr(),
+        from.getIpAddrBytes(),
         from.getHostName(),
+        from.getHostNameBytes(),
         from.getDatanodeUuid(),
+        from.getDatanodeUuidBytes(),
         from.getXferPort(),
         from.getInfoPort(),
         from.getInfoSecurePort(),
@@ -83,18 +91,39 @@ public DatanodeID(DatanodeID from) {
    */
   public DatanodeID(String ipAddr, String hostName, String datanodeUuid,
       int xferPort, int infoPort, int infoSecurePort, int ipcPort) {
+    this(ipAddr, getByteString(ipAddr),
+        hostName, getByteString(hostName),
+        datanodeUuid, getByteString(datanodeUuid),
+        xferPort, infoPort, infoSecurePort, ipcPort);
+  }
+
+  private DatanodeID(String ipAddr, ByteString ipAddrBytes,
+      String hostName, ByteString hostnameBytes,
+      String datanodeUuid, ByteString datanodeUuidBytes,
+      int xferPort, int infoPort, int infoSecurePort, int ipcPort) {
     this.ipAddr = ipAddr;
+    this.ipAddrBytes = ipAddrBytes;
     this.hostName = hostName;
+    this.hostNameBytes = hostnameBytes;
     this.datanodeUuid = checkDatanodeUuid(datanodeUuid);
+    this.datanodeUuidBytes = datanodeUuidBytes;
     this.xferPort = xferPort;
     this.infoPort = infoPort;
     this.infoSecurePort = infoSecurePort;
     this.ipcPort = ipcPort;
     updateXferAddrAndInvalidateHashCode();
   }
-  
+
+  private static ByteString getByteString(String str) {
+    if (str != null) {
+      return ByteString.copyFromUtf8(str);
+    }
+    return ByteString.EMPTY;
+  }
+
   public void setIpAddr(String ipAddr) {
     this.ipAddr = ipAddr;
+    this.ipAddrBytes = getByteString(ipAddr);
     updateXferAddrAndInvalidateHashCode();
   }
 
@@ -109,9 +138,14 @@ public String getDatanodeUuid() {
     return datanodeUuid;
   }
 
+  public ByteString getDatanodeUuidBytes() {
+    return datanodeUuidBytes;
+  }
+
   @VisibleForTesting
   public void setDatanodeUuidForTesting(String datanodeUuid) {
     this.datanodeUuid = datanodeUuid;
+    this.datanodeUuidBytes = getByteString(datanodeUuid);
     updateXferAddrAndInvalidateHashCode();
   }
 
@@ -130,6 +164,10 @@ public String getIpAddr() {
     return ipAddr;
   }
 
+  public ByteString getIpAddrBytes() {
+    return ipAddrBytes;
+  }
+
   /**
    * @return hostname
    */
@@ -137,6 +175,10 @@ public String getHostName() {
     return hostName;
   }
 
+  public ByteString getHostNameBytes() {
+    return hostNameBytes;
+  }
+
   /**
    * @return hostname from the actual connection 
    */
@@ -262,7 +304,9 @@ public String toString() {
    */
   public void updateRegInfo(DatanodeID nodeReg) {
     ipAddr = nodeReg.getIpAddr();
+    ipAddrBytes = getByteString(ipAddr);
     hostName = nodeReg.getHostName();
+    hostNameBytes = getByteString(hostName);
     peerHostName = nodeReg.getPeerHostName();
     xferPort = nodeReg.getXferPort();
     infoPort = nodeReg.getInfoPort();
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/PBHelper.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/PBHelper.java
index 22137e7..fb457b7 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/PBHelper.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/PBHelper.java
@@ -30,7 +30,11 @@
 import java.util.Arrays;
 import java.util.EnumSet;
 import java.util.List;
+import java.util.concurrent.ConcurrentHashMap;
 
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+import com.google.common.cache.LoadingCache;
 import org.apache.hadoop.fs.CacheFlag;
 import org.apache.hadoop.fs.ContentSummary;
 import org.apache.hadoop.fs.CreateFlag;
@@ -272,6 +276,49 @@
   private static final XAttr.NameSpace[] XATTR_NAMESPACE_VALUES = 
       XAttr.NameSpace.values();
 
+  /**
+   * Map used to cache fixed strings to ByteStrings. Since there is no
+   * automatic expiration policy, only use this for strings from a fixed, small
+   * set.
+   * <p/>
+   * This map should not be accessed directly. Used the getFixedByteString
+   * methods instead.
+   */
+  private static ConcurrentHashMap<Object, ByteString> fixedByteStringCache =
+      new ConcurrentHashMap<>();
+
+  private static ByteString getFixedByteString(Text key) {
+    ByteString value = fixedByteStringCache.get(key);
+    if (value == null) {
+      value = ByteString.copyFromUtf8(key.toString());
+      fixedByteStringCache.put(key, value);
+    }
+    return value;
+  }
+
+  private static ByteString getFixedByteString(String key) {
+    ByteString value = fixedByteStringCache.get(key);
+    if (value == null) {
+      value = ByteString.copyFromUtf8(key);
+      fixedByteStringCache.put(key, value);
+    }
+    return value;
+  }
+
+  /**
+   * Guava cache for caching String to ByteString encoding. Use this when the
+   * set of Strings is large, mutable, or unknown.
+   */
+  private static LoadingCache<String, ByteString> bytestringCache =
+      CacheBuilder.newBuilder()
+          .maximumSize(10000)
+          .build(
+              new CacheLoader<String, ByteString>() {
+                public ByteString load(String key) {
+                  return ByteString.copyFromUtf8(key);
+                }
+              });
+
   private PBHelper() {
     /** Hidden constructor */
   }
@@ -403,10 +450,10 @@ public static DatanodeIDProto convert(DatanodeID dn) {
     // which is the same as the DatanodeUuid. Since StorageID is a required
     // field we pass the empty string if the DatanodeUuid is not yet known.
     return DatanodeIDProto.newBuilder()
-        .setIpAddr(dn.getIpAddr())
-        .setHostName(dn.getHostName())
+        .setIpAddrBytes(dn.getIpAddrBytes())
+        .setHostNameBytes(dn.getHostNameBytes())
         .setXferPort(dn.getXferPort())
-        .setDatanodeUuid(dn.getDatanodeUuid() != null ? dn.getDatanodeUuid() : "")
+        .setDatanodeUuidBytes(dn.getDatanodeUuidBytes())
         .setInfoPort(dn.getInfoPort())
         .setInfoSecurePort(dn.getInfoSecurePort())
         .setIpcPort(dn.getIpcPort()).build();
@@ -615,7 +662,7 @@ public static ExtendedBlock convert(ExtendedBlockProto eb) {
   public static ExtendedBlockProto convert(final ExtendedBlock b) {
     if (b == null) return null;
    return ExtendedBlockProto.newBuilder().
-      setPoolId(b.getBlockPoolId()).
+      setPoolIdBytes(getFixedByteString(b.getBlockPoolId())).
       setBlockId(b.getBlockId()).
       setNumBytes(b.getNumBytes()).
       setGenerationStamp(b.getGenerationStamp()).
@@ -719,7 +766,8 @@ static public DatanodeInfoProto convertDatanodeInfo(DatanodeInfo di) {
   public static DatanodeInfoProto convert(DatanodeInfo info) {
     DatanodeInfoProto.Builder builder = DatanodeInfoProto.newBuilder();
     if (info.getNetworkLocation() != null) {
-      builder.setLocation(info.getNetworkLocation());
+      builder.setLocationBytes(
+          bytestringCache.getUnchecked(info.getNetworkLocation()));
     }
     if (info.getUpgradeDomain() != null) {
       builder.setUpgradeDomain(info.getUpgradeDomain());
@@ -867,8 +915,9 @@ public static TokenProto convert(Token<?> tok) {
     return TokenProto.newBuilder().
               setIdentifier(ByteString.copyFrom(tok.getIdentifier())).
               setPassword(ByteString.copyFrom(tok.getPassword())).
-              setKind(tok.getKind().toString()).
-              setService(tok.getService().toString()).build(); 
+              setKindBytes(getFixedByteString(tok.getKind())).
+              setServiceBytes(getFixedByteString(tok.getService())).
+        build();
   }
   
   public static Token<BlockTokenIdentifier> convert(
@@ -1510,8 +1559,8 @@ public static HdfsFileStatusProto convert(HdfsFileStatus fs) {
       setModificationTime(fs.getModificationTime()).
       setAccessTime(fs.getAccessTime()).
       setPermission(PBHelper.convert(fs.getPermission())).
-      setOwner(fs.getOwner()).
-      setGroup(fs.getGroup()).
+      setOwnerBytes(getFixedByteString(fs.getOwner())).
+      setGroupBytes(getFixedByteString(fs.getGroup())).
       setFileId(fs.getFileId()).
       setChildrenNum(fs.getChildrenNum()).
       setPath(ByteString.copyFrom(fs.getLocalNameInBytes())).
-- 
1.7.9.5

